kable_styling()
collect_predictions(rf_fit) %>%
#ggplot(aes(Global_Sales, .pred))+
ggplot(aes(.pred, Global_Sales)) +
scale_x_continuous(breaks = seq(0,16,by=4))+
scale_y_continuous(breaks = seq(0,40,by=8))+
geom_abline(lty = 2, color = "black") +
geom_point(alpha = 0.5, color = "midnightblue") +
geom_smooth(method = "lm", se = F)+
coord_fixed(ratio=1, expand=T)+
coord_flip()+
labs(x = "Predykcja", y = "Obserwacja", title = "Wykres zestawienia obserwacji i predykcji")+
theme_classic()+
theme(plot.title = element_text(color = "black", size = 18, face = "bold")
,panel.grid.major = element_line(colour = "gray80", linewidth = 0.001))
save(rf_res,file="dane/rf_res.rda")
rf_fit %>%
extract_fit_parsnip() %>%
vip() +
theme_classic()
#uczenie modelu
# save(rf_res,file="dane/rf_res.rda")
load("dane/rf_res.rda")
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#najlepsze modele ze względu na R^2
rf_res %>%
show_best(metric = "rsq")
#najlepsze modele ze względu na RMSE
rf_res %>%
show_best(metric = "rmse")
#najlepsze modele ze względu na MAE
rf_res %>%
show_best(metric = "mae")
rf_best_param <- select_best(rf_res, metric = "rmse")
#finalizacja workflow'u
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
#uczenie ostatecznego modelu
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics() %>%
select(.metric,.estimate) %>%
`colnames<-`(c("Parametr","Wartość")) %>%
mutate(Wartość = round(Wartość,3)) %>%
kbl() %>%
kable_styling()
collect_predictions(rf_fit) %>%
#ggplot(aes(Global_Sales, .pred))+
ggplot(aes(.pred, Global_Sales)) +
scale_x_continuous(breaks = seq(0,16,by=4))+
scale_y_continuous(breaks = seq(0,40,by=8))+
geom_abline(lty = 2, color = "black") +
geom_point(alpha = 0.5, color = "midnightblue") +
geom_smooth(method = "lm", se = F)+
coord_fixed(ratio=1, expand=T)+
coord_flip()+
labs(x = "Predykcja", y = "Obserwacja", title = "Wykres zestawienia obserwacji i predykcji")+
theme_classic()+
theme(plot.title = element_text(color = "black", size = 18, face = "bold")
,panel.grid.major = element_line(colour = "gray80", linewidth = 0.001))
rf_fit %>%
extract_fit_parsnip() %>%
vip() +
theme_classic()
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
#count(Platform = fct_collapse(as.factor(Platform), Other = unique(as.factor(Platform)[Sales<sum(Sales)/100])),wt = Sales) %>%
arrange(desc(Sales),Platform) %>%
ungroup()
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
library(forcats) #do tworzenia 'others'
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
library(tidymodels) #las losowy
library(usemodels) #tuning modeli
library(textrecipes) #tuning modeli - instrukcja
library(vip) #porownanie waznosci zmiennych w modelach
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A")
game_sales <- game_sales %>%
`rownames<-`(NULL)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
diamonds %>%
count(clarity)
diamonds %>%
mutate(clarity = case_when(
clarity %in% c("I1", "IF") ~ "Inne"
))
diamonds %>% filter(clarity %in% c("I1","IF"))
diamonds %>%
mutate(clarity = factor(case_when(
clarity %in% c("I1", "IF") ~ "Inne"
)))
diamonds$clarity
diamonds$clarity <- factor(diamonds$clarity, ordered = F)
diamonds$clarity
diamonds %>%
mutate(clarity = factor(case_when(
clarity %in% c("I1", "IF") ~ "Inne"
)))
diamonds %>%
mutate(clarity = case_when(
clarity %in% c("I1", "IF") ~ "Inne"
))
fct_collapse(diamonds$clarity, other = c("IF", "I1"))
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
#count(Platform = fct_collapse(as.factor(Platform), Other = unique(as.factor(Platform)[Sales<sum(Sales)/100])),wt = Sales) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier"
) %>%
hc_title(
text = "Udział platform w rynku growym w latach 1980-2016",
margin = 20,
align = "left",
style = list(color = "black", useHTML = TRUE)
)
fct_collapse(diamonds$clarity, other = c("IF", "I1"))
#| layout-ncol: 3
game_sales %>%
mutate(Sales=NA_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Ameryce Północnej"
) %>%
hc_title(
text = "Udział platform w Ameryce Północnej w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
game_sales %>%
mutate(Sales=EU_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Europie"
) %>%
hc_title(
text = "Udział platform w Europie w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
game_sales %>%
mutate(Sales=JP_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Japonii"
) %>%
hc_title(
text = "Udział platform w Japonii w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
library(forcats) #do tworzenia 'others'
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
library(tidymodels) #las losowy
library(usemodels) #tuning modeli
library(textrecipes) #tuning modeli - instrukcja
library(vip) #porownanie waznosci zmiennych w modelach
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A")
game_sales <- game_sales %>%
`rownames<-`(NULL)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Year <- as.numeric(game_sales$Year)
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA
#zestawienie braków danych z podziałem na kolumny
kbl(tibble(Rank=sum(is.na(game_sales$Rank)),
Name=sum(is.na(game_sales$Name)),
Platform=sum(is.na(game_sales$Platform)),
Year=sum(is.na(game_sales$Year)),
Genre=sum(is.na(game_sales$Genre)),
Publisher=sum(is.na(game_sales$Publisher)),
NA_Sales=sum(is.na(game_sales$NA_Sales)),
EU_Sales=sum(is.na(game_sales$EU_Sales)),
JP_Sales=sum(is.na(game_sales$JP_Sales)),
Other_sales=sum(is.na(game_sales$Other_Sales)),
Global_Sales=sum(is.na(game_sales$Global_Sales)),
'Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),])), table.attr = "style = \"color: black;\""
,caption = "<span style='font-size:30px'>Zestawienie braków danych z podziałem na zmienne</span>"
) %>%
kable_styling("basic", full_width = T,position = "float_left") %>%
column_spec(c(4,6), color = "#FF3030") %>%
column_spec(12, color = "orange") %>%
column_spec(c(1:3,5,7:11), color = "#1E90FF")
missings <- game_sales[which(is.na(game_sales$Year) | is.na(game_sales$Publisher)),] %>%
mutate(Rank = as.numeric(Rank))
#median(missings$Rank)
#mean(missings$Global_Sales)
#jakie statystyki mają wartości z brakami
tibble("Średnia z `Rank`"= mean(missings$Rank),"Mediana z `Global_Sales`"= median(missings$Global_Sales)) %>%
kbl() %>%
kable_styling()
rm(list = c('missings'))
game_sales <- na.omit(game_sales)
data.frame(game_sales[which(game_sales$Year>2016),]) %>%
`rownames<-`(NULL) %>%
select(Rank,Name,Platform,Year,Genre,Publisher,Global_Sales) %>%
kbl() %>%
kable_styling()
game_sales <- game_sales[-which(game_sales$Year>2016),]
head(game_sales,n=1) %>%
kbl() %>%
kable_styling()
game_sales <- game_sales[-1,]
game_sales[which(game_sales$Platform=="DS"),] %>%
ggplot(aes(x=Year))+
geom_boxplot()+
scale_x_continuous(breaks=seq(1980,2016,by=1))+
labs(
title="Gry wydane na Nintendo DS",
x="Rok wydania"
)+
theme_classic(base_size = 10)+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
,plot.title = element_text(color = "black", size = 17, face = "bold")
,plot.subtitle = element_text(size = 25, face = "bold")
,plot.caption = element_text(face = "italic")
,axis.text.y = element_blank()
,legend.position = "none"
,legend.background = element_rect(fill = "white")
,legend.title = element_blank()
)
game_sales[which(game_sales$Platform=="DS"),] %>%
arrange(Year) %>%
select(Rank,Name,Platform,Year,Genre,Global_Sales) %>%
head(1) %>%
kbl() %>%
kable_styling()
game_sales[which(game_sales$Platform=="DS"&game_sales$Year==1985),"Year"] <- 2010
rownames(game_sales) <- 1:nrow(game_sales)
game_sales <- game_sales %>%
mutate(Rank = rownames(game_sales))
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
#t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
kbl(t) %>%
kable_styling(full_width = T) %>%
add_footnote(label = "* liczba sztuk w milionach",notation = "none")
remove(t)
game_sales %>%
ggstatsplot::ggnetweenstats(x = Genres, y = Global_Sales, bf.message = F)
install.packages("purrr")
library(purrr)
game_sales %>%
ggstatsplot::ggnetweenstats(x = Genres, y = Global_Sales, bf.message = F)
View(game_sales)
game_sales %>%
aggregate(Genre~Publisher, FUN = count)
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
library(forcats) #do tworzenia 'others'
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
library(tidymodels) #las losowy
library(usemodels) #tuning modeli
library(textrecipes) #tuning modeli - instrukcja
library(vip) #porownanie waznosci zmiennych w modelach
game_sales %>%
aggregate(Genre~Publisher, FUN = count)
game_sales %>%
aggregate(Genre~Publisher, FUN = sum)
game_sales %>%
aggregate(Genre+Publisher, FUN = count)
game_sales %>%
aggregate(Genre,Publisher, FUN = count)
game_sales %>%
aggregate(Publisher+Platform, FUN = count)
game_sales %>%
aggregate(Publisher~Platform, FUN = count)
mat <- matrix(nrow = length(levels(game_sales$Genre)),ncol = length(levels(game_sales$Publisher)))
mat <- matrix(nrow = length(levels(game_sales$Genre)),ncol = length(levels(game_sales$Platform)))
mat <- matrix(nrow = length(levels(game_sales$Genre)),ncol = length(levels(game_sales$Platform))) #Publisher odpada, bo ma za dużo leveli
colnames(mat) <-  levels(game_sales$Genre)
mat <- matrix(nrow = length(levels(game_sales$Platform)),ncol = length(levels(game_sales$Genre))) #Publisher odpada, bo ma za dużo leveli
colnames(mat) <-  levels(game_sales$Genre)
rownames(mat) <- levels(game_sales$Platform)
for(i in 1:length(levels(game_sales$Genre))){
for(j in 1:length(levels(game_sales$Platform))){
coc_mat[j,i] <- length(which(game_sales$Platform==levels(game_sales$Platform)[j] & game_sales$Genre==levels(game_sales$Genre)[i]))
}
}
for(i in 1:length(levels(game_sales$Genre))){
for(j in 1:length(levels(game_sales$Platform))){
mat[j,i] <- length(which(game_sales$Platform==levels(game_sales$Platform)[j] & game_sales$Genre==levels(game_sales$Genre)[i]))
}
}
View(mat)
balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
install.packages("gplots")
gplots::balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
dt <- as.table(as.matrix(mat))
gplots::balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
# game_sales %>%
#   aggregate(Publisher~Platform, FUN = count)
mat <- matrix(nrow = length(levels(game_sales$Platform)),ncol = length(levels(game_sales$Genre))) #Publisher odpada, bo ma za dużo leveli
colnames(mat) <-  levels(game_sales$Genre)
rownames(mat) <- levels(game_sales$Platform)
for(i in 1:length(levels(game_sales$Genre))){
for(j in 1:length(levels(game_sales$Platform))){
mat[j,i] <- length(which(game_sales$Platform==levels(game_sales$Platform)[j] & game_sales$Genre==levels(game_sales$Genre)[i]))
}
}
dt <- as.table(as.matrix(mat))
gplots::balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE) #nieczytelny
# game_sales %>%
#   aggregate(Publisher~Platform, FUN = count)
mat <- matrix(nrow = length(levels(game_sales$Platform)),ncol = length(levels(game_sales$Genre))) #Publisher odpada, bo ma za dużo leveli
colnames(mat) <-  levels(game_sales$Genre)
rownames(mat) <- levels(game_sales$Platform)
for(i in 1:length(levels(game_sales$Genre))){
for(j in 1:length(levels(game_sales$Platform))){
mat[j,i] <- length(which(game_sales$Platform==levels(game_sales$Platform)[j] & game_sales$Genre==levels(game_sales$Genre)[i]))
}
}
dt <- as.table(as.matrix(mat))
gplots::balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE) #nieczytelny
View(mat)
chisq.test(as.data.frame(dt))
chisq.test(as.data.frame(mat))
res.ca <- FactoMineR::CA(as.data.frame(mat), graph = FALSE)
res.ca
summary(res.ca)
#summary(res.ca)  #obcina do 10 leveli
res.ca$row
get_eigenvalue(res.ca)
factoextra::get_eigenvalue(res.ca)
factoextra::fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 50))
factoextra::fviz_screeplot(res.ca) +
geom_hline(yintercept=33.33, linetype=2, color="red")
factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
row <- factoextra::get_ca_row(res.ca)
row
# game_sales %>%
#   aggregate(Publisher~Platform, FUN = count)
mat <- matrix(nrow = length(levels(game_sales$Platform)),ncol = length(levels(game_sales$Genre))) #Publisher odpada, bo ma za dużo leveli
colnames(mat) <-  levels(game_sales$Genre)
rownames(mat) <- levels(game_sales$Platform)
for(i in 1:length(levels(game_sales$Genre))){
for(j in 1:length(levels(game_sales$Platform))){
mat[j,i] <- length(which(game_sales$Platform==levels(game_sales$Platform)[j] & game_sales$Genre==levels(game_sales$Genre)[i]))
}
}
dt <- as.table(as.matrix(mat))
gplots::balloonplot(t(dt), main ="Gatunek x Platforma", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
chisq.test(as.data.frame(mat)) #pvalue < 0.05, cechy nie są niezależne ,więc można przejść do analizy korespondencji
res.ca <- FactoMineR::CA(as.data.frame(mat), graph = FALSE)
res.ca
#summary(res.ca)  #obcina do 10 leveli
res.ca$row #dopisać interpretacje
factoextra::get_eigenvalue(res.ca)
factoextra::fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 35)) #5 wymiarów wyjaśni ~90%
factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
row <- factoextra::get_ca_row(res.ca)
row
install.packages("corrplot")
corrplot::corrplot(row$cos2, is.corr=FALSE)
corrplot::corrplot(t(row$cos2), is.corr=FALSE)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2")
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,5,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,40,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(2,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(5,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(10,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(30,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(30,0,1,30))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(30,30,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(30,0,30,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(30,0,2,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(1,0,30,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(10,0,30,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(10,0,10,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(15,0,15,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,0,30,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,0,20,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,-50,20,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,20,20,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(20,0,20,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(15,0,20,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(15,0,25,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(15,0,15,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(15,0,15,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,1,0))
```{r fig.width = 21, fig.height = 5}
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,1,0))
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
col <- factoextra::get_ca_col(res.ca)
col
corrplot::corrplot(t(col$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
col <- factoextra::get_ca_col(res.ca)
col
corrplot::corrplot(t(col$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
col <- factoextra::get_ca_col(res.ca)
col
corrplot::corrplot(t(col$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
col
row
row <- factoextra::get_ca_row(res.ca)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
row <- factoextra::get_ca_row(res.ca)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
row <- factoextra::get_ca_row(res.ca)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
row <- factoextra::get_ca_row(res.ca)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
row <- factoextra::get_ca_row(res.ca)
corrplot::corrplot(t(row$cos2), is.corr=FALSE, title = "cos^2",mar=c(0,0,3,0))
factoextra::get_eigenvalue(res.ca)
factoextra::fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 35)) #5 wymiarów wyjaśni ~90%
factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
# res.ca
#summary(res.ca)  #obcina do 10 leveli
round(res.ca$row,3) #dopisać interpretacje
chisq.test(as.data.frame(mat)) #pvalue < 0.05, cechy nie są niezależne ,więc można przejść do analizy korespondencji
res.ca <- FactoMineR::CA(as.data.frame(mat), graph = FALSE)
# res.ca
#summary(res.ca)  #obcina do 10 leveli
res.ca$row #dopisać interpretacje
#factoextra::get_eigenvalue(res.ca) nie wiem co to
factoextra::fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 35)) #5 wymiarów wyjaśni ~90%
factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
