# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
levels(game_sales$Publisher) #578
levels(game_sales$Genre) #12
levels(game_sales$Platform) #31
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)
library(tidyverse)
library(ggplot2)
library(kableExtra)
g_s <- na.omit(game_sales)
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
levels(game_sales$Publisher) #578
levels(game_sales$Genre) #12
levels(game_sales$Platform) #31
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)
colnames(g_s[,10:ncol(g_s)])
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
las <- randomForest::randomForest(Global_Sales~.
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
library(tidyverse)
library(ggplot2)
library(kableExtra)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
t
round(head(tibble(summary(game_sales$Year)),6),0)
rbind(t,St.dev=apply(game_sales,2,sd))
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
#t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
kbl(t) %>%
kable_styling(full_width = T) %>%
add_footnote(label = "* liczba sztuk w milionach",notation = "none")
count(levels(game_sales$Platform)) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
nrow(levels(game_sales$Publisher)) #578
nrow(levels(game_sales$Genre)) #12
nrow(levels(game_sales$Platform)) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(tibble_row(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(tibble(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(data.frame(levels(game_sales$Publisher))) #578
count(data.frame(levels(game_sales$Publisher))) #578
count(data.frame(levels(game_sales$Genre))) #12
count(data.frame(levels(game_sales$Platform))) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(as.factor(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
unique(levels(game_sales$Publisher)) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher)) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher)) #578
xd
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
sum(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
nlevels(game_sales$Publisher) #578
nlevels(game_sales$Genre) #12
nlevels(game_sales$Platform) #31
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
library(tidyverse)
library(ggplot2)
library(kableExtra)
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A") #spoko ale do analizy, nie do modelu
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Year <- as.numeric(game_sales$Year)
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA
# pierwsze 12 tytułów alfabetycznie
head(levels(game_sales$Name), n = 12)
tidytext::unnest_tokens(data.frame(levels(game_sales$Name)))
library(tidymodels)
game_sales %>%
filter(Name=="Gal*gun 2")
library(tidyverse)
library(ggplot2)
library(kableExtra)
game_sales %>%
filter(Name=="Gal*gun 2")
setwd("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt")
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(tidymodels)
set.seed(1410)
game_sales
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
install.packages("usemodels")
library(usemodels)
use_ranger(Global_Sales ~ Name+Platform+Genre+Publisher, data = sales_train)
install.packages("doParallel")
install.packages("doParallel")
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) %>%
step_other(Publisher, treshold = 0.01) %>%
step_clean_levels(Publisher)
install.packages("textrecipes")
library(textrecipes)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) %>%
step_other(Publisher, treshold = 0.01) %>%
step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
#  step_other(Publisher, treshold = 0.01) %>%
#  step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
install.packages("ranger")
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
#  step_other(Publisher, treshold = 0.01) %>%
#  step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
show_notes(.Last.tune.result)
game_s <- na.omit(game_sales)
sales_split <- initial_split(game_s, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(50991)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
autoplot(ranger_tune)
collect_predictions(sales_fit) %>%
ggplot(aes(Game_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
collect_predictions(sales_fit) %>%
ggplot(aes(Global_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
use_ranger(Global_Sales ~ Platform+Genre+Publisher+Year, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(40409)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
show_best(ranger_tune, metric = "rsq")
library(tidymodels)
show_best(ranger_tune, metric = "rsq")
sales_folds
install.packages("doParallel")
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
install.packages("flextable")
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
library(doParallel)
registerDoParallel(cores = 4)
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
rs <- vfold_cv(train_data, v = 5)
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
rs <- vfold_cv(sales_train, v = 5)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
library(doParallel)
registerDoParallel(cores = 4)
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
rf_res %>%
collect_metrics() %>%
flextable::flextable()
rf_res %>%
show_best(metric = "rsq")
rf_res %>%
show_best(metric = "rmse")
rf_res %>%
show_best(metric = "mae")
autoplot(rf_res)
rf_best_param <- select_best(rf_res, metric = "rmse")
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
rf_fit <- rf_final %>%
last_fit(data_split, metrics = meas)
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
head(n = 20) %>%
flextable::flextable()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher + Year,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
rs <- vfold_cv(sales_train, v = 5)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
library(doParallel)
registerDoParallel(cores = 4)
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
rf_res %>%
collect_metrics() %>%
flextable::flextable()
rf_res %>%
show_best(metric = "rsq")
rf_res %>%
show_best(metric = "rmse")
rf_res %>%
show_best(metric = "mae")
autoplot(rf_res)
rf_best_param <- select_best(rf_res, metric = "rmse")
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
head(n = 20) %>%
flextable::flextable()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)
View(rf_res)
View(rf_res)
View(rf_res)
save(rf_res,file="dane/rf_res.rda")
save(ranger_tune,file = "dane/ranger_tune.rda")
