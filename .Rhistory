"Platforma"=Platform,
"Gatunek"=Genre) %>%
select(Wydawca,Platforma,Gatunek) %>%
d3r::d3_nest(value_cols = "Platforma") %>%
#group_by(Wydawca) %>%
sunburstR::sunburst(count=T,sumNodes = T)
#"Platforma"=game_sales$Platform,
#"Gatunek"=game_sales$Genre),
width="100%", height=400)
sunburstR::sunburst(data.frame("Wydawca"=game_sales$Publisher,
)
,
=
#"Platforma"=game_sales$Platform,
#"Gatunek"=game_sales$Genre),
width="100%", height=400)
#"Platforma"=game_sales$Platform,
#"Gatunek"=game_sales$Genre),
width="100%", height=400)
height=400)
sunburstR::sunburst(data.frame("Wydawca"=game_sales$Publisher)
#"Platforma"=game_sales$Platform,
#"Gatunek"=game_sales$Genre),
width="100%", height=400)
sunburstR::sunburst(data.frame("Wydawca"=game_sales$Publisher),
#"Platforma"=game_sales$Platform,
#"Gatunek"=game_sales$Genre),
width="100%", height=400)
Global_Sales_Publisher %>%
d3r::d3_nest(value_cols = "Global_Sales")
Global_Sales_Publisher %>%
d3r::d3_nest(value_cols = "Global_Sales") %>%
sunburstR::sunburst(count=T,sumNodes = T)
Global_Sales_Publisher %>%
d3r::d3_nest(value_cols = "Global_Sales") %>%
sunburstR::sunburst()
Global_Sales_Publisher %>%
d3r::d3_nest(value_cols = "Global_Sales") %>%
sunburstR::sunburst(width="100%", height=400)
index <- sample(1:length(game_sales), (7/10)*length(game_sales))
index <- sample(1:length(game_sales), (7/10*length(game_sales)))
(7/10*length(game_sales))
length(game_sales)
index <- sample(1:nrow(game_sales), (7/10*nrow(game_sales)))
game_sales[which(game_sales$Name=="Wiedźmin 3")]
game_sales[which(game_sales$Name=="Wiedźmin 3: Dziki Gon")]
game_sales[which(game_sales$Name=="Wiedźmin 3: Dziki gon")]
game_sales[which(game_sales$Name=="Wiedzmin 3: Dziki gon")]
game_sales %>%
filter(Name=="Wiedzmin")
game_sales %>%
filter(Name=="Gal*gun 2")
game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform)
game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform)
game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre)
#game_sales[index,] %>%
rpart::rpart(game_sales[index,],Global_Sales~Genre+Publisher+Platform)
#game_sales[index,] %>%
rpart::rpart(game_sales[index,],Global_Sales~Genre+Publisher+Platform)
data.frame(game_sales[index,]) %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform)
game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)
model <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)
model %>%
plot()
model %>%
summary()
pred <- predict(model, newdata = game_sales[-index,])
cbind(pred, game_sales$Global_Sales)
cbind(pred, game_sales[-index,"Global_Sales"])
mean(pred-game_sales[-index,"Global_Sales"])
abs(mean(pred-game_sales[-index,"Global_Sales"]))
abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
model2 <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform+Year,.)
pred2 <- predict(model2, newdata = game_sales[-index,])
cbind(pred2, game_sales[-index,"Global_Sales"])
abs(mean(pred2-game_sales[-index,"Global_Sales"]))*100000
abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
confint(model, level = 0.05)
cbind(pred, game_sales[-index,"Global_Sales"])
#cbind(pred, game_sales[-index,"Global_Sales"])
abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
model2 <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform+Year,.)
pred2 <- predict(model2, newdata = game_sales[-index,])
#cbind(pred2, game_sales[-index,"Global_Sales"])
abs(mean(pred2-game_sales[-index,"Global_Sales"]))*100000
pred2-game_sales[-index,"Global_Sales"]
set.seed(14102)
index <- sample(1:nrow(game_sales), (7/10*nrow(game_sales)))
model <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)
pred <- predict(model, newdata = game_sales[-index,])
#cbind(pred, game_sales[-index,"Global_Sales"])
abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
model2 <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform+Year,.)
pred2 <- predict(model2, newdata = game_sales[-index,])
#cbind(pred2, game_sales[-index,"Global_Sales"])
abs(mean(pred2-game_sales[-index,"Global_Sales"]))*100000
error <- NULL
for(i in 1:10000){
set.seed(i)
index <- sample(1:nrow(game_sales), (7/10*nrow(game_sales)))
model <- game_sales[index,] %>%
rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)
pred <- predict(model, newdata = game_sales[-index,])
#cbind(pred, game_sales[-index,"Global_Sales"])
#abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
error <- c(error,abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000)
}
mean(error)
error
min(error)
max(error)
install.packages("randomForest")
randomForest::randomForest(Global_Sales~Genre+Publisher+Platform+Year
,data=game_sales[index,]
,xtest=game_sales[-index,]
,ytest=game_sales[-index,])
las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform+Year
,data=game_sales[index,]
,xtest=game_sales[-index,]
,ytest=game_sales[-index,])
g_s <- na.omit(game_sales)
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform+Year
,data=game_sales[index,]
,xtest=game_sales[-index,]
,ytest=game_sales[-index,])
las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform+Year
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
,data=g_s[index,]
,xtest=g_s[-index,c('Genre','Publisher','Platform')]
,ytest=g_s[-index,'Game_Sales'])
levels(game_sales)
game_sales
levels(game_sales$Publisher)
levels(game_sales$Genre)
levels(game_sales$Platform)
install.packages("fastDummies")
g_s <- game_sales %>%
na.omit() %>%
select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = Publisher,remove_selected_columns=T)
library(tidyverse)
library(ggplot2)
library(kableExtra)
g_s <- game_sales %>%
na.omit() %>%
select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = Publisher,remove_selected_columns=T)
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = Publisher,remove_selected_columns=T)
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
colnames(g_s[,10:ncols(g_s)])
colnames(g_s[,10:ncol(g_s)])
g_s <- na.omit(game_sales)
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
levels(game_sales$Publisher) #578
levels(game_sales$Genre) #12
levels(game_sales$Platform) #31
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)
library(tidyverse)
library(ggplot2)
library(kableExtra)
g_s <- na.omit(game_sales)
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
levels(game_sales$Publisher) #578
levels(game_sales$Genre) #12
levels(game_sales$Platform) #31
g_s <- game_sales %>%
na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)
colnames(g_s[,10:ncol(g_s)])
index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
las <- randomForest::randomForest(Global_Sales~.
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
library(tidyverse)
library(ggplot2)
library(kableExtra)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
t
round(head(tibble(summary(game_sales$Year)),6),0)
rbind(t,St.dev=apply(game_sales,2,sd))
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
#t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
kbl(t) %>%
kable_styling(full_width = T) %>%
add_footnote(label = "* liczba sztuk w milionach",notation = "none")
count(levels(game_sales$Platform)) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
nrow(levels(game_sales$Publisher)) #578
nrow(levels(game_sales$Genre)) #12
nrow(levels(game_sales$Platform)) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(tibble_row(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(tibble(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(data.frame(levels(game_sales$Publisher))) #578
count(data.frame(levels(game_sales$Publisher))) #578
count(data.frame(levels(game_sales$Genre))) #12
count(data.frame(levels(game_sales$Platform))) #31
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(as.factor(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
unique(levels(game_sales$Publisher)) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher)) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher)) #578
xd
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
count(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
sum(unique(levels(game_sales$Publisher))) #578
# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
nlevels(game_sales$Publisher) #578
nlevels(game_sales$Genre) #12
nlevels(game_sales$Platform) #31
las <- randomForest::randomForest(Global_Sales~.-Global_Sales
,data=g_s[index,]
,xtest=g_s[-index,]
,ytest=g_s[-index,])
library(tidyverse)
library(ggplot2)
library(kableExtra)
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A") #spoko ale do analizy, nie do modelu
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Year <- as.numeric(game_sales$Year)
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA
# pierwsze 12 tytułów alfabetycznie
head(levels(game_sales$Name), n = 12)
tidytext::unnest_tokens(data.frame(levels(game_sales$Name)))
library(tidymodels)
game_sales %>%
filter(Name=="Gal*gun 2")
library(tidyverse)
library(ggplot2)
library(kableExtra)
game_sales %>%
filter(Name=="Gal*gun 2")
setwd("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt")
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(tidymodels)
set.seed(1410)
game_sales
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
install.packages("usemodels")
library(usemodels)
use_ranger(Global_Sales ~ Name+Platform+Genre+Publisher, data = sales_train)
install.packages("doParallel")
install.packages("doParallel")
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) %>%
step_other(Publisher, treshold = 0.01) %>%
step_clean_levels(Publisher)
install.packages("textrecipes")
library(textrecipes)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) %>%
step_other(Publisher, treshold = 0.01) %>%
step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
#  step_other(Publisher, treshold = 0.01) %>%
#  step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
install.packages("ranger")
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
#  step_other(Publisher, treshold = 0.01) %>%
#  step_clean_levels(Publisher)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(73355)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) #%>%
show_notes(.Last.tune.result)
game_s <- na.omit(game_sales)
sales_split <- initial_split(game_s, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(50991)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
autoplot(ranger_tune)
collect_predictions(sales_fit) %>%
ggplot(aes(Game_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
collect_predictions(sales_fit) %>%
ggplot(aes(Global_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
use_ranger(Global_Sales ~ Platform+Genre+Publisher+Year, data = sales_train)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(40409)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
