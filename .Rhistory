kbl() %>%
kable_styling()
# t1 <- game_sales %>%
#   select(Year,Platform) %>%
#   aggregate(.~Platform, FUN = min) %>%
#   pivot_longer(-Platform) %>%
#   mutate(min = value) %>%
#   select(Platform, min)
#
#
# t2 <- game_sales %>%
#   select(Year,Platform) %>%
#   aggregate(.~Platform, FUN = max) %>%
#   pivot_longer(-Platform) %>%
#   mutate(max = value) %>%
#   select(Platform, max)
#
# t <- merge(t1,t2, by="Platform", sort=T)
#
# t[order(t$min),] %>%
#   `row.names<-`(NULL) %>%
#   `colnames<-`(c("Platforma","Rok startu","Rok końca")) %>%
#   kbl() %>%
#   kable_styling()%>%
#   scroll_box(width = "100%", height = "200px")
#
# #niepotrzebne po wykonaniu interaktywnego
t3 <- game_sales %>%
select(Year,Platform,Name) %>%
aggregate(.~Platform+Year, FUN = sum)
t3 <- t3[order(t3$Platform),] %>%
group_by(Platform)%>%
mutate(texto = paste0(Platform, "\n",
min(Year), "-",max(Year)
))
# #nieinteraktywny
# t3 %>%
#   ggplot(aes(x=Platform,y=Year))+
#   geom_textline(aes(label=Platform),size=4.3)+
#   scale_y_continuous(breaks=seq(1980,2016,by=2))+
#   geom_hline(yintercept = seq(1980,2016,by=2), linetype = "dashed", color = "black", alpha = 0.5, size=0.1)+
#   coord_flip()+
#   theme_classic(base_size = 20)+
#   theme(
#     axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
#     ,plot.title = element_text(color = "black", size = 32, face = "bold")
#     ,plot.subtitle = element_text(size = 25, face = "bold")
#   )
# interaktywny
gg <- t3 %>%
ggplot(aes(y=Platform,x=Year))+
scale_x_continuous(breaks=seq(1980,2016,by=1))+
# geom_hline(xintercept = seq(1980,2016,by=1), linetype = "dashed", color = "black", alpha = 0.5, size=0.1)+
geom_line_interactive(size = 1.2,
alpha = 0.4,
aes(tooltip = texto)) +
geom_point_interactive(data = t3 %>%
group_by(Platform) %>%
filter(Year == max(Year) | Year == min(Year)),
aes(tooltip = texto), #specifies tooltip for ggiraph
fill = "white",
size = 2.5,
stroke = 1.5,
shape = 21) +
geom_text_interactive(data = t3 %>%
group_by(Platform) %>%
filter(Year == max(Year)),
aes(x = Year + 0.7, y = Platform,
color = Platform,
label = Platform),
check_overlap = T)+
theme_classic(base_size = 20)+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
,plot.title = element_text(color = "black", size = 32, face = "bold")
,plot.subtitle = element_text(size = 25, face = "bold")
,legend.position = "none"
)
girafe(ggobj = gg,
width_svg = 21, height_svg = 10, #sizes the output plot
options = list(
opts_tooltip(
opacity = 0.8, #opacity of the background box
css = "background-color:#4c6061; color:white; padding:10px; border-radius:5px;"),
opts_hover_inv(css = "stroke-width: 1;opacity:0.6;"),
opts_hover(css = "stroke-width: 4; opacity: 1;")
)
)
rm(list = c('t','t1','t2'))
game_sales %>%
mutate(Sales=Global_Sales*1000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier"
) %>%
hc_title(
text = "Udział platform w rynku growym w latach 1980-2016",
margin = 20,
align = "left",
style = list(color = "black", useHTML = TRUE)
)
game_sales %>%
mutate(Sales=Global_Sales*1000000) %>%
select(Platform,Sales)
game_sales %>%
mutate(Sales=Global_Sales*1000000) %>%
select(Platform,Sales)%>%
tail(20)
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales)%>%
tail(20)
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier"
) %>%
hc_title(
text = "Udział platform w rynku growym w latach 1980-2016",
margin = 20,
align = "left",
style = list(color = "black", useHTML = TRUE)
)
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
library(tidymodels) #las losowy
library(usemodels) #tuning modeli
library(textrecipes) #tuning modeli - instrukcja
library(vip) #porownanie waznosci zmiennych w modelach
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A")
game_sales <- game_sales %>%
`rownames<-`(NULL)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Year <- as.numeric(game_sales$Year)
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA
#zestawienie braków danych z podziałem na kolumny
kbl(tibble(Rank=sum(is.na(game_sales$Rank)),
Name=sum(is.na(game_sales$Name)),
Platform=sum(is.na(game_sales$Platform)),
Year=sum(is.na(game_sales$Year)),
Genre=sum(is.na(game_sales$Genre)),
Publisher=sum(is.na(game_sales$Publisher)),
NA_Sales=sum(is.na(game_sales$NA_Sales)),
EU_Sales=sum(is.na(game_sales$EU_Sales)),
JP_Sales=sum(is.na(game_sales$JP_Sales)),
Other_sales=sum(is.na(game_sales$Other_Sales)),
Global_Sales=sum(is.na(game_sales$Global_Sales)),
'Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),])), table.attr = "style = \"color: black;\""
,caption = "<span style='font-size:30px'>Zestawienie braków danych z podziałem na zmienne</span>"
) %>%
kable_styling("basic", full_width = T,position = "float_left") %>%
column_spec(c(4,6), color = "#FF3030") %>%
column_spec(12, color = "orange") %>%
column_spec(c(1:3,5,7:11), color = "#1E90FF")
missings <- game_sales[which(is.na(game_sales$Year) | is.na(game_sales$Publisher)),] %>%
mutate(Rank = as.numeric(Rank))
#median(missings$Rank)
#mean(missings$Global_Sales)
#jakie statystyki mają wartości z brakami
tibble("Średnia z `Rank`"= mean(missings$Rank),"Mediana z `Global_Sales`"= median(missings$Global_Sales)) %>%
kbl() %>%
kable_styling()
game_sales <- na.omit(game_sales)
data.frame(game_sales[which(game_sales$Year>2016),]) %>%
`rownames<-`(NULL) %>%
select(Rank,Name,Platform,Year,Genre,Publisher,Global_Sales) %>%
kbl() %>%
kable_styling()
game_sales <- game_sales[-which(game_sales$Year>2016),]
head(game_sales,n=1) %>%
kbl() %>%
kable_styling()
game_sales <- game_sales[-1,]
game_sales[which(game_sales$Platform=="DS"),] %>%
ggplot(aes(x=Year))+
geom_boxplot()+
scale_x_continuous(breaks=seq(1980,2016,by=1))+
labs(
title="Gry wydane na Nintendo DS",
x="Rok wydania"
)+
theme_classic(base_size = 10)+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
,plot.title = element_text(color = "black", size = 17, face = "bold")
,plot.subtitle = element_text(size = 25, face = "bold")
,plot.caption = element_text(face = "italic")
,axis.text.y = element_blank()
,legend.position = "none"
,legend.background = element_rect(fill = "white")
,legend.title = element_blank()
)
game_sales[which(game_sales$Platform=="DS"),] %>%
arrange(Year) %>%
select(Rank,Name,Platform,Year,Genre,Global_Sales) %>%
head(1) %>%
kbl() %>%
kable_styling()
game_sales[which(game_sales$Platform=="DS"&game_sales$Year==1985),"Year"] <- 2010
rownames(game_sales) <- 1:nrow(game_sales)
game_sales <- game_sales %>%
mutate(Rank = rownames(game_sales))
set.seed(1410)
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
#podział zbioru został dokonany przy okazji budowania poprzedniego modelu
#przepis uczenia
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
#tuningowanie
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
#potencjalne zakresy parametrów
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
#metoda resamplingu
rs <- vfold_cv(sales_train, v = 5)#vfold_cv(sales_train, strata = Global_Sales)
#wybór miar do oceny dopasowania
meas <- metric_set(rsq, rmse, mae)
#grid parametrów do uczenia
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
#workflow
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
#uczenie modelu
save(rf_res,file="dane/rf_res.rda")
#uczenie modelu
# save(rf_res,file="dane/rf_res.rda")
# load("dane/rf_res.rda")
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#najlepsze modele ze względu na R^2
rf_res %>%
show_best(metric = "rsq")
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#najlepsze modele ze względu na R^2
rf_res %>%
show_best(metric = "rsq")
#najlepsze modele ze względu na RMSE
rf_res %>%
show_best(metric = "rmse")
#najlepsze modele ze względu na MAE
rf_res %>%
show_best(metric = "mae")
rf_best_param <- select_best(rf_res, metric = "rmse")
#finalizacja workflow'u
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
#uczenie ostatecznego modelu
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics() %>%
select(.metric,.estimate) %>%
`colnames<-`(c("Parametr","Wartość")) %>%
mutate(Wartość = round(Wartość,3)) %>%
kbl() %>%
kable_styling()
collect_predictions(rf_fit) %>%
#ggplot(aes(Global_Sales, .pred))+
ggplot(aes(.pred, Global_Sales)) +
scale_x_continuous(breaks = seq(0,16,by=4))+
scale_y_continuous(breaks = seq(0,40,by=8))+
geom_abline(lty = 2, color = "black") +
geom_point(alpha = 0.5, color = "midnightblue") +
geom_smooth(method = "lm", se = F)+
coord_fixed(ratio=1, expand=T)+
coord_flip()+
labs(x = "Predykcja", y = "Obserwacja", title = "Wykres zestawienia obserwacji i predykcji")+
theme_classic()+
theme(plot.title = element_text(color = "black", size = 18, face = "bold")
,panel.grid.major = element_line(colour = "gray80", linewidth = 0.001))
save(rf_res,file="dane/rf_res.rda")
rf_fit %>%
extract_fit_parsnip() %>%
vip() +
theme_classic()
#uczenie modelu
# save(rf_res,file="dane/rf_res.rda")
load("dane/rf_res.rda")
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#wyniki uczenia
rf_res %>%
collect_metrics() %>%
flextable::flextable()
#najlepsze modele ze względu na R^2
rf_res %>%
show_best(metric = "rsq")
#najlepsze modele ze względu na RMSE
rf_res %>%
show_best(metric = "rmse")
#najlepsze modele ze względu na MAE
rf_res %>%
show_best(metric = "mae")
rf_best_param <- select_best(rf_res, metric = "rmse")
#finalizacja workflow'u
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
#uczenie ostatecznego modelu
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics() %>%
select(.metric,.estimate) %>%
`colnames<-`(c("Parametr","Wartość")) %>%
mutate(Wartość = round(Wartość,3)) %>%
kbl() %>%
kable_styling()
collect_predictions(rf_fit) %>%
#ggplot(aes(Global_Sales, .pred))+
ggplot(aes(.pred, Global_Sales)) +
scale_x_continuous(breaks = seq(0,16,by=4))+
scale_y_continuous(breaks = seq(0,40,by=8))+
geom_abline(lty = 2, color = "black") +
geom_point(alpha = 0.5, color = "midnightblue") +
geom_smooth(method = "lm", se = F)+
coord_fixed(ratio=1, expand=T)+
coord_flip()+
labs(x = "Predykcja", y = "Obserwacja", title = "Wykres zestawienia obserwacji i predykcji")+
theme_classic()+
theme(plot.title = element_text(color = "black", size = 18, face = "bold")
,panel.grid.major = element_line(colour = "gray80", linewidth = 0.001))
rf_fit %>%
extract_fit_parsnip() %>%
vip() +
theme_classic()
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
#count(Platform = fct_collapse(as.factor(Platform), Other = unique(as.factor(Platform)[Sales<sum(Sales)/100])),wt = Sales) %>%
arrange(desc(Sales),Platform) %>%
ungroup()
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
library(forcats) #do tworzenia 'others'
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
library(tidymodels) #las losowy
library(usemodels) #tuning modeli
library(textrecipes) #tuning modeli - instrukcja
library(vip) #porownanie waznosci zmiennych w modelach
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A")
game_sales <- game_sales %>%
`rownames<-`(NULL)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
diamonds %>%
count(clarity)
diamonds %>%
mutate(clarity = case_when(
clarity %in% c("I1", "IF") ~ "Inne"
))
diamonds %>% filter(clarity %in% c("I1","IF"))
diamonds %>%
mutate(clarity = factor(case_when(
clarity %in% c("I1", "IF") ~ "Inne"
)))
diamonds$clarity
diamonds$clarity <- factor(diamonds$clarity, ordered = F)
diamonds$clarity
diamonds %>%
mutate(clarity = factor(case_when(
clarity %in% c("I1", "IF") ~ "Inne"
)))
diamonds %>%
mutate(clarity = case_when(
clarity %in% c("I1", "IF") ~ "Inne"
))
fct_collapse(diamonds$clarity, other = c("IF", "I1"))
game_sales %>%
mutate(Sales=Global_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
#count(Platform = fct_collapse(as.factor(Platform), Other = unique(as.factor(Platform)[Sales<sum(Sales)/100])),wt = Sales) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier"
) %>%
hc_title(
text = "Udział platform w rynku growym w latach 1980-2016",
margin = 20,
align = "left",
style = list(color = "black", useHTML = TRUE)
)
fct_collapse(diamonds$clarity, other = c("IF", "I1"))
#| layout-ncol: 3
game_sales %>%
mutate(Sales=NA_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Ameryce Północnej"
) %>%
hc_title(
text = "Udział platform w Ameryce Północnej w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
game_sales %>%
mutate(Sales=EU_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Europie"
) %>%
hc_title(
text = "Udział platform w Europie w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
game_sales %>%
mutate(Sales=JP_Sales*10000000) %>%
select(Platform,Sales) %>%
aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
group_by(Platform) %>%
arrange(desc(Sales),Platform) %>%
ungroup() %>%
mutate(texto = paste0(Platform," ",
round(Sales/sum(Sales)*100,2),"%")) %>%
hchart("pie",
hcaes(x = texto, y = Sales),
name = "Sprzedanych kopii gier w Japonii"
) %>%
hc_title(
text = "Udział platform w Japonii w latach 1980-2016",
align = "left",
style = list(color = "black", useHTML = TRUE)
)
