add_model(rf)
#save(rf_res,file="dane/rf_res.rda")
#load("dane/rf_res.rda")
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
rf_res %>%
collect_metrics() %>%
flextable::flextable()
rf_res %>%
show_best(metric = "rsq")
rf_res %>%
show_best(metric = "rmse")
rf_res %>%
show_best(metric = "mae")
autoplot(rf_res)
rf_best_param <- select_best(rf_res, metric = "rmse")
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
head(n = 20) %>%
flextable::flextable()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)+
tune::coord_obs_pred()
result <- rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales)
mean(result$Global_Sales - result$.pred)*100000
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)
+tune::coord_obs_pred()
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
library(tidymodels)
set.seed(1410)
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
library(usemodels)
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
library(textrecipes)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = metric_set(rsq, rmse, mae))
meas <- metric_set(rsq, rmse, mae)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = meas)
meas <- metric_set(rsq, rmse, mae)
meas <- metric_set(rsq, rmse, mae)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = meas)
meas <- metric_set(rsq, rmse, mae)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(doParallel)
registerDoParallel(cores = 8)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
#load("dane/ranger_tune.rda")
ranger_tune <-
tune_grid(ranger_workflow,
resamples = sales_folds,
grid = 11)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
collect_predictions(sales_fit) %>%
ggplot(aes(Global_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
save(ranger_tune,file = "dane/ranger_tune.rda")
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher + Year,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
rs <- vfold_cv(sales_train, v = 5)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
#save(rf_res,file="dane/rf_res.rda")
#load("dane/rf_res.rda")
rf_res <-
rf_wf %>%
tune_grid(
resamples = rs,
grid = grid,
metrics = meas
)
rf_res %>%
collect_metrics() %>%
flextable::flextable()
rf_res %>%
show_best(metric = "rsq")
rf_res %>%
show_best(metric = "rmse")
rf_res %>%
show_best(metric = "mae")
autoplot(rf_res)
rf_best_param <- select_best(rf_res, metric = "rmse")
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
head(n = 20) %>%
flextable::flextable()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)
#tune::coord_obs_pred()
result <- rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales)
mean(result$Global_Sales - result$.pred)*100000
save(rf_res,file="dane/rf_res.rda")
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A")
game_sales <- game_sales %>%
`rownames<-`(NULL)
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
game_sales$Year <- as.numeric(game_sales$Year)
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA
#zestawienie braków danych z podziałem na kolumny
kbl(tibble(Rank=sum(is.na(game_sales$Rank)),
Name=sum(is.na(game_sales$Name)),
Platform=sum(is.na(game_sales$Platform)),
Year=sum(is.na(game_sales$Year)),
Genre=sum(is.na(game_sales$Genre)),
Publisher=sum(is.na(game_sales$Publisher)),
NA_Sales=sum(is.na(game_sales$NA_Sales)),
EU_Sales=sum(is.na(game_sales$EU_Sales)),
JP_Sales=sum(is.na(game_sales$JP_Sales)),
Other_sales=sum(is.na(game_sales$Other_Sales)),
Global_Sales=sum(is.na(game_sales$Global_Sales)),
'Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),])), table.attr = "style = \"color: black;\""
,caption = "<span style='font-size:30px'>Zestawienie braków danych z podziałem na zmienne</span>"
) %>%
kable_styling("basic", full_width = T,position = "float_left") %>%
column_spec(c(4,6), color = "#FF3030") %>%
column_spec(12, color = "orange") %>%
column_spec(c(1:3,5,7:11), color = "#1E90FF")
missings <- game_sales[which(is.na(game_sales$Year) | is.na(game_sales$Publisher)),] %>%
mutate(Rank = as.numeric(Rank))
#median(missings$Rank)
#mean(missings$Global_Sales)
tibble("Średnia z `Rank`"= mean(missings$Rank),"Mediana z `Global_Sales`"= median(missings$Global_Sales)) %>%
kbl() %>%
kable_styling()
game_sales <- na.omit(game_sales)
# pierwsze 12 tytułów alfabetycznie
head(levels(game_sales$Name), n = 12)
tidytext::unnest_tokens(data.frame(levels(game_sales$Name)))
data.frame(game_sales[which(game_sales$Year>2016),]) %>%
`rownames<-`(NULL) %>%
select(Rank,Name,Platform,Year,Genre,Publisher,Global_Sales) %>%
kbl() %>%
kable_styling()
data.frame(game_sales[which(game_sales$Year>2016),]) %>%
`rownames<-`(NULL) %>%
select(Rank,Name,Platform,Year,Genre,Publisher,Global_Sales) %>%
kbl() %>%
kable_styling()
game_sales <- game_sales[-which(game_sales$Year>2016),]
game_sales <- game_sales %>%
mutate(Rank = rownames(game_sales))
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
#t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
kbl(t) %>%
kable_styling(full_width = T) %>%
add_footnote(label = "* liczba sztuk w milionach",notation = "none")
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
round(head(tibble(summary(game_sales$Year)),6),0),
round(head(tibble(summary(game_sales$EU_Sales)),6),2),
round(head(tibble(summary(game_sales$NA_Sales)),6),2),
round(head(tibble(summary(game_sales$JP_Sales)),6),2),
round(head(tibble(summary(game_sales$Other_Sales)),6),2),
round(head(tibble(summary(game_sales$Global_Sales)),6),2)))
#t <- rbind(t,St.dev=apply(game_sales,2,sd))
colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")
row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")
kbl(t) %>%
kable_styling(full_width = T) %>%
add_footnote(label = "* liczba sztuk w milionach",notation = "none")
remove(t)
game_sales %>%
ggplot(aes(Year))+
geom_bar(na.rm=T,color="black",fill="#8800FF")+
labs(title="Publikacje gier na przestrzeni lat",
x="Rok publikacji",
y="Liczba tytułów")+
#  scale_x_discrete()+
#  scale_x_discrete(breaks = 1980:2020)+
scale_x_continuous(breaks=seq(1980,2016,by=2))+
geom_hline(yintercept = c(500,1000), linetype = "dashed", color = "black", alpha = 0.4)+
theme_classic(base_size = 40)+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
,plot.title = element_text(color = "black", size = 48, face = "bold")
,plot.subtitle = element_text(size = 25, face = "bold")
,plot.caption = element_text(face = "italic")
#,plot.background = element_rect(fill = "#141414")
)
#8800FF
game_sales %>%
mutate(Europa = EU_Sales,USA = NA_Sales,Japonia = JP_Sales,Other=Other_Sales) %>%
select(Year,Europa,USA,Japonia,Other) %>%
aggregate(.~Year, sum) %>%
pivot_longer(-Year) %>%
ggplot()+
geom_smooth(aes(Year,value*100000,colour=name),se=F)+
# geom_smooth(aes(y=EU_Sales*1000000),se=F,color="darkgreen") +
# geom_smooth(aes(y=NA_Sales*1000000),se=F,color="darkblue") +
# geom_smooth(aes(y=JP_Sales*1000000),se=F,color="darkred") +
# geom_smooth(aes(y=Other_Sales*1000000),se=F,color="black") +
labs(title="Łączna sprzedaż gier wydawanych w poszczególnych latach z podziałem na regiony",
x="Rok wydania",
y="Liczba sprzedanych kopii")+
#  scale_x_discrete()+
#  scale_x_discrete(breaks = 1980:2020)+
scale_x_continuous(breaks=seq(1980,2016,by=2))+
scale_y_continuous(labels = scales::label_number(big.mark = " ", decimal.mark = ",", scale = 1/1000000, suffix = " mln"), position = "right")+
scale_color_manual(values = c("green","red","blue","black"))+
theme_classic(base_size = 40)+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
,axis.text.y = element_text(angle = -30, vjust=0)
,plot.title = element_text(color = "black", size = 32, face = "bold")
,plot.subtitle = element_text(size = 25, face = "bold")
,plot.caption = element_text(face = "italic")
,legend.position = c(0.2, 0.75)
,legend.background = element_rect(fill = "white")
,legend.title = element_blank()
#,plot.background = element_rect(fill = "#141414")
)
#scale_fill_discrete(c("darkgreen","darkred","darkblue","black"),labels("Europa","Japonia","USA","Reszta świata"))
#8800FF
library(tidymodels)
set.seed(1410)
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)
sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
library(usemodels)
use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)
library(textrecipes)
ranger_recipe <-
recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train)
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("regression") %>%
set_engine("ranger")
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
load("dane/ranger_tune.rda")
# ranger_tune <-
#   tune_grid(ranger_workflow,
#             resamples = sales_folds,
#             grid = 11)
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")
autoplot(ranger_tune)
final_rf <- ranger_workflow %>%
finalize_workflow(select_best(ranger_tune))
final_rf
sales_fit <- last_fit(final_rf,sales_split)
sales_fit
collect_metrics(sales_fit)
collect_predictions(sales_fit) %>%
ggplot(aes(Global_Sales, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(alpha = 0.5, color = "midnightblue") +
coord_fixed()
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher + Year,
data = sales_train) %>%
step_normalize(all_numeric_predictors())
rf <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)
rs <- vfold_cv(sales_train, v = 5)
meas <- metric_set(rsq, rmse, mae)
grid <- grid_latin_hypercube(params, size = 10)
grid %>%
flextable::flextable()
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf)
# save(rf_res,file="dane/rf_res.rda")
load("dane/rf_res.rda")
# rf_res <-
#   rf_wf %>%
#   tune_grid(
#     resamples = rs,
#     grid = grid,
#     metrics = meas
# )
rf_res %>%
collect_metrics() %>%
flextable::flextable()
rf_res %>%
show_best(metric = "rsq")
rf_res %>%
show_best(metric = "rmse")
rf_res %>%
show_best(metric = "mae")
autoplot(rf_res)
rf_best_param <- select_best(rf_res, metric = "rmse")
rf_final <-
rf_wf %>%
finalize_workflow(rf_best_param)
rf_fit <- rf_final %>%
last_fit(sales_split, metrics = meas)
rf_fit %>%
collect_metrics()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
head(n = 20) %>%
flextable::flextable()
rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales) %>%
ggplot(aes(.pred, Global_Sales)) +
geom_jitter(width = 0, alpha = 0.05) +
geom_smooth(method = lm,
se = F)
#tune::coord_obs_pred()
result <- rf_fit %>%
collect_predictions() %>%
select(.pred, Global_Sales)
mean(result$Global_Sales - result$.pred)*100000
head(levels(game_sales$Platform))
levels(game_sales$Platform)
levels(game_sales$Genre)
