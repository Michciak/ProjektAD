---
title: "Analiza sprzedaży gier komputerowych 1980-2016"
subtitle: "Projekt z Analizy Danych"
author: "Michał Koziński"
format: 
  html:
    page-layout: full
    toc: true
    toc-depth: 3
    theme: pulse
date: "`r Sys.Date()`"
---

<style type="text/css">
.main-container {
  max-width: 2100px;
  margin-left: auto;
  margin-right: auto;
}
</style>

```{notatki eval=FALSE, include=FALSE}

opracowanie: <https://www.kaggle.com/code/alimara/vg-sales-eda>

1. Co jest celem badawczym, co chcemy uzysakć, co chcemy zbadać?
2. Opis analizowanych danych, wizualizacja, podstawowe statystyki,
- ważne jest aby skomentować dane
- co się nasuwa na myśl jako analityk
- zaznaczyć jakie zmienne ma sie do wykorzystania
3. Import danych i ich oczyszczenie
4. Postawienie hipotez badawczych, warto opisać co się chce zbadać, może zbudować model predykcyjny?
5. Podsumowanie



pomysły:
  - (platformy/region)sprzedarz na konkretne platformy w danym regionie
  - (wydawcy/lata)jak radzili sobie wydawcy na oprzestrzeni lat
  - 1(wydawcy [z podziałem na rynki]/lata)jak dani wydawcy radzili sobie na poszczególnych rynkach (np. wykres liniowy dla konkretnego rynku)
  - (sprzedaż w regionach.lata)sprzedarz w danym regionie w stosunku do roku
  - (platformy/lata)okres życia platform na podstawie roku publikacji
  - ??? (sprzedaż w regionach/sprzedaż)wykres kołowy! udziału w sprzedarzy poszczególnych rynków
  - (sprzedaż w regionach/lata)jak wzrastała sprzedarz na przestrzeni lat
  - (gatunki/lata)jakie gatunki były popularne w danym okresie czasu
  - (wydawcy/gatunki)z jakich gatunkow dani wydawcy sa najbardziej znani
  - 1(wydawca / sprzedaż w regionach)zależność wydawcy ze sprzedarzą w danym regionie
  - (gatunki/ sprzedaż w regionach)zależność gatunku ze sprzedarzą w danym regionie
  - !model prognozujacy sprzedarz na podstawie wydawcy, platformy i gatunku, roku - drzewa decyzyjne

zależność: chi^2 niezależności

model:
  drzewa decyzyjne:
  <https://www.statmethods.net/advstats/cart.html>

rok utworzenia zbioru 2020

```

```{r biblioteki, include=FALSE}
library(tidyverse)
library(ggplot2)
library(kableExtra)
```

# Przedstawienie zbioru danych

### Źródło danych

Zbiór danych pochodzi ze stronny *Kaggle*:

<https://www.kaggle.com/datasets/arslanali4343/sales-of-video-games>.

### Zawartość zbioru

Zbiór danych jest zestawieniem wyników sprzedażowych gier video z lat 1980 - 2020. Uwzględnione zostały w nim tylko tytuły, które sprzedały się w liczbie większej niż 100 000 kopii. Zbiór uwzględnia wyniki sprzedażowe w Ameryce Północnej, Europie i Japonii.

<br/>

### Przedstawienie zmiennych

Zmienne zawarte w zbiorze:

-   `Rank` - Ranking ogólnej sprzedaży 

-   `Name` - Nazwa gry

-   `Platform` - Platforma wydania gry (np. PS3, SNES, PC etc.)

-   `Year` - Rok publikacji gry

-   `Genre` - Gatunek gry

-   `Publisher` - Wydawca gry

-   `NA_Sales` - Liczba sprzedanych kopii w Ameryce Północnej (w milionach)

-   `EU_Sales` - Liczba sprzedanych kopii w Europie (w milionach)

-   `JP_Sales` - Liczba sprzedanych kopii w Japonii (w milionach)

-   `Other_Sales` - Liczba sprzedanych kopii w pozostałych regionach (w milionach)

-   `Global_Sales` - Łączna liczba sprzedanych kopii na całym świecie  (w milionach)

<br/>

------------------------------------------------------------------------

# Cele badawcze

Opis zbioru danych, przedstawienie korelacji między zawartymi w nim zmiennymi, budowa modelu predykcyjnego.

<br/>

___

# Przygotowanie zbioru

<br/>

### Wczytanie danych

```{r wczytanie danych}

game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A") #spoko ale do analizy, nie do modelu

```

<br/>

### Czyszczenie danych

<br/>

#### Zmiana typu danych z *char* na *factor*

```{r czyszczenie danych}
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
```

<br/>

#### Zamiana roku produkcji z *char* na *numeric*

```{r}
game_sales$Year <- as.numeric(game_sales$Year)
```

<br/>

<br/>

### Obsługa braków danych

<br/>

#### Zmiana *"unknown"* na *NA*

```{r}
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA

```

<br/>

#### Lokalizowanie braków

<!-- <span style='font-size:20px'>Zestawienie braków danych z podziałem na zmienne</span> -->

```{r tabelka braków danych, eval=T, include=T, echo=F}
#zestawienie braków danych z podziałem na kolumny
kbl(tibble(Rank=sum(is.na(game_sales$Rank)),
       Name=sum(is.na(game_sales$Name)),
       Platform=sum(is.na(game_sales$Platform)),
       Year=sum(is.na(game_sales$Year)),
       Genre=sum(is.na(game_sales$Genre)),
       Publisher=sum(is.na(game_sales$Publisher)),
       NA_Sales=sum(is.na(game_sales$NA_Sales)),
       EU_Sales=sum(is.na(game_sales$EU_Sales)),
       JP_Sales=sum(is.na(game_sales$JP_Sales)),
       Other_sales=sum(is.na(game_sales$Other_Sales)),
       Global_Sales=sum(is.na(game_sales$Global_Sales)),
       'Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),])), table.attr = "style = \"color: black;\""
       ,caption = "<span style='font-size:30px'>Zestawienie braków danych z podziałem na zmienne</span>"
    ) %>%
  kable_styling("basic", full_width = T,position = "float_left") %>%
  column_spec(c(4,6), color = "#FF3030") %>%
  column_spec(12, color = "orange") %>%
  column_spec(c(1:3,5,7:11), color = "#1E90FF")

#kbl(tibble('Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),]))) %>%
#  kable_styling("striped", full_width = F)

#count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),]) #125 takich obserwacji, gdzie nie znamy, ani roku, ani wydawcy
```

```{r text sracapping, eval=FALSE, include=FALSE}
# pierwsze 12 tytułów alfabetycznie
head(levels(game_sales$Name), n = 12)

tidytext::unnest_tokens(data.frame(levels(game_sales$Name)))

count(tidytext::unnest_tokens(levels(game_sales$Name)))
```


<br/>

<br/>

___

# Opis zbioru

<br/>

### Podstawowe statystki opisowe 

<!-- min, średnia, kwantyle (w tym mediana), max, sd -->

<br/>

```{r tabelka statystyk opisowych, eval=T, include=T, echo=F}
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
  round(head(tibble(summary(game_sales$Year)),6),0),
  round(head(tibble(summary(game_sales$EU_Sales)),6),2),
  round(head(tibble(summary(game_sales$NA_Sales)),6),2),
  round(head(tibble(summary(game_sales$JP_Sales)),6),2),
  round(head(tibble(summary(game_sales$Other_Sales)),6),2),
  round(head(tibble(summary(game_sales$Global_Sales)),6),2)))

#t <- rbind(t,St.dev=apply(game_sales,2,sd))

colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")

row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")

kbl(t) %>%
  kable_styling(full_width = T) %>%
  add_footnote(label = "* liczba sztuk w milionach",notation = "none")
```


<br/>

```{r wykres publikacji, fig.width = 21, fig.height = 10, eval=T, include=T, echo=F}
game_sales %>%
ggplot(aes(Year))+
  geom_bar(na.rm=T,color="black",fill="#8800FF")+
  labs(title="Publikacje gier na przestrzeni lat",
       x="Rok publikacji",
       y="Liczba tytułów")+
#  scale_x_discrete()+
#  scale_x_discrete(breaks = 1980:2020)+
  scale_x_continuous(breaks=seq(1980,2020,by=2))+
  theme_classic(base_size = 40)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "#8800FF", size = 48, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,plot.caption = element_text(face = "italic")
    #,plot.background = element_rect(fill = "#141414")
  )


#8800FF
```

```{r include=FALSE}
game_sales[which(game_sales$Year>2016),]
```

<br/>

### Dane kategoryczne

```{r include=FALSE}
# sunburstR::sunburst(data.frame("Wydawca"=game_sales$Publisher
#                                "Platforma"=game_sales$Platform, 
#                                "Gatunek"=game_sales$Genre), width="100%", height=400)
# 
# 
# game_sales %>%
#   mutate("Wydawca"=Publisher,
#          "Platforma"=Platform,
#          "Gatunek"=Genre) %>%
#   select(Wydawca,Platforma,Gatunek) %>%
#   d3r::d3_nest(value_cols = "Platforma") %>%
#   #group_by(Wydawca) %>%
#   sunburstR::sunburst(count=T,sumNodes = T)


```

```{r}
Global_Sales_Publisher <- data.frame(aggregate(game_sales$Global_Sales, by=list(Category=game_sales$Publisher), FUN = sum)) %>%
  `colnames<-`(c("Publisher","Global_Sales"))

# Global_Sales_Publisher %>%
#   d3r::d3_nest(value_cols = "Global_Sales") %>%
#   sunburstR::sunburst(width="100%", height=400)

game_sales %>%
filter(Name=="Gal*gun 2")
```


```{r}


head(Global_Sales_Publisher[order(Global_Sales_Publisher$Global_Sales, decreasing=T),],15)



```







# Model predykcyjny - LaS lOsOwY

```{r}
set.seed(14102)

index <- sample(1:nrow(game_sales), (7/10*nrow(game_sales)))

model <- game_sales[index,] %>%
  rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)

pred <- predict(model, newdata = game_sales[-index,])

#cbind(pred, game_sales[-index,"Global_Sales"])
abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000


```

<!-- ```{r} -->
<!-- model2 <- game_sales[index,] %>% -->
<!--   rpart::rpart(Global_Sales~Genre+Publisher+Platform+Year,.) -->

<!-- pred2 <- predict(model2, newdata = game_sales[-index,]) -->

<!-- #cbind(pred2, game_sales[-index,"Global_Sales"]) -->
<!-- abs(mean(pred2-game_sales[-index,"Global_Sales"]))*100000 -->

<!-- ``` -->

```{r}
g_s <- na.omit(game_sales)

index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))

# las <- randomForest::randomForest(Global_Sales~Genre+Publisher+Platform
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,c('Genre','Publisher','Platform')]
#                            ,ytest=g_s[-index,'Game_Sales'])
levels(game_sales$Publisher) #578
levels(game_sales$Genre) #12
levels(game_sales$Platform) #31

g_s <- game_sales %>%
  na.omit() %>%
#  select(Global_Sales,Genre,Publisher,Platform) %>%
  fastDummies::dummy_cols(.,select_columns = 'Publisher',remove_selected_columns=T)

colnames(g_s[,10:ncol(g_s)])

index <- sample(1:nrow(g_s), (7/10*nrow(g_s)))

# las <- randomForest::randomForest(Global_Sales~.-Global_Sales
#                            ,data=g_s[index,]
#                            ,xtest=g_s[-index,]
#                            ,ytest=g_s[-index,])
```


```{r}
error <- NULL

# for(i in 1:10000){
#   set.seed(i)
# 
# index <- sample(1:nrow(game_sales), (7/10*nrow(game_sales)))
# 
# model <- game_sales[index,] %>%
#   rpart::rpart(Global_Sales~Genre+Publisher+Platform,.)
# 
# pred <- predict(model, newdata = game_sales[-index,])
# 
# #cbind(pred, game_sales[-index,"Global_Sales"])
# #abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000
#   
# error <- c(error,abs(mean(pred-game_sales[-index,"Global_Sales"]))*100000)
# }


min(error)
max(error)
mean(error)


```

# Model predykcyjny - `TidyModels`

```{r}
library(tidymodels)
set.seed(1410)
game_s <- na.omit(game_sales)
sales_split <- initial_split(game_s, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)

sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
```

```{r}
library(usemodels)

use_ranger(Global_Sales ~ Platform+Genre+Publisher+Year, data = sales_train)

library(textrecipes)
```

```{r}

ranger_recipe <- 
  recipe(formula = Global_Sales ~ Platform + Genre + Publisher + Year, data = sales_train) 

ranger_spec <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_mode("regression") %>% 
  set_engine("ranger") 

ranger_workflow <- 
  workflow() %>% 
  add_recipe(ranger_recipe) %>% 
  add_model(ranger_spec) 

set.seed(40409)
ranger_tune <-
  tune_grid(ranger_workflow, 
            resamples = sales_folds, 
            grid = 11)
```

```{r}
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")

autoplot(ranger_tune)

final_rf <- ranger_workflow %>%
  finalize_workflow(select_best(ranger_tune))

final_rf

sales_fit <- last_fit(final_rf,sales_split)
sales_fit

collect_metrics(sales_fit)
```

```{r}
collect_predictions(sales_fit) %>%
  ggplot(aes(Global_Sales, .pred)) +
  geom_abline(lty = 2, color = "gray50") +
  geom_point(alpha = 0.5, color = "midnightblue") +
  coord_fixed()



```

# M-method random forset model

```{r}
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher + Year,
              data = sales_train) %>%
  step_normalize(all_numeric_predictors())

rf <- rand_forest(
  mtry = tune(),
  trees = tune(),
  min_n = tune()
) %>%
  set_mode("regression") %>%
  set_engine("ranger", importance = "impurity")

params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)

rs <- vfold_cv(sales_train, v = 5)

meas <- metric_set(rsq, rmse, mae)

grid <- grid_latin_hypercube(params, size = 10)
grid %>%
  flextable::flextable()

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf)

library(doParallel)
registerDoParallel(cores = 4)
rf_res <-
  rf_wf %>%
  tune_grid(
    resamples = rs,
    grid = grid,
    metrics = meas
)

rf_res %>%
  collect_metrics() %>%
  flextable::flextable()

rf_res %>%
  show_best(metric = "rsq")

rf_res %>%
  show_best(metric = "rmse")

rf_res %>% 
  show_best(metric = "mae")

autoplot(rf_res)

rf_best_param <- select_best(rf_res, metric = "rmse")

rf_final <- 
  rf_wf %>%
  finalize_workflow(rf_best_param)

rf_fit <- rf_final %>%
  last_fit(sales_split, metrics = meas)

rf_fit %>%
  collect_metrics()

rf_fit %>%
  collect_predictions() %>%
  select(.pred, Global_Sales) %>%
  head(n = 20) %>%
  flextable::flextable()

rf_fit %>%
  collect_predictions() %>%
  select(.pred, Global_Sales) %>%
  ggplot(aes(.pred, Global_Sales)) +
  geom_jitter(width = 0, alpha = 0.05) +
  geom_smooth(method = lm, 
              se = F)
```





