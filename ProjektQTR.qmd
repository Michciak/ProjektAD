---
title: "Analiza sprzedaży gier video 1980-2016"
subtitle: "Projekt v.3.0.1"
author: "Michał Koziński"
format: 
  html:
    page-layout: full
    toc: true
    toc-depth: 3
    theme: pulse
    # self-contained: true
date: "`r Sys.Date()`"
---

<style type="text/css">
.main-container {
  max-width: 2100px;
  margin-left: auto;
  margin-right: auto;
}
</style>

```{notatki eval=FALSE, include=FALSE}

opracowanie: <https://www.kaggle.com/code/alimara/vg-sales-eda>

1. Co jest celem badawczym, co chcemy uzysakć, co chcemy zbadać?
2. Opis analizowanych danych, wizualizacja, podstawowe statystyki,
- ważne jest aby skomentować dane
- co się nasuwa na myśl jako analityk
- zaznaczyć jakie zmienne ma sie do wykorzystania
3. Import danych i ich oczyszczenie
4. Postawienie hipotez badawczych, warto opisać co się chce zbadać, może zbudować model predykcyjny?
5. Podsumowanie



pomysły:
  - (wydawcy/lata)jak radzili sobie wydawcy na oprzestrzeni lat #za dużo wydawców
  - 1(wydawcy [z podziałem na rynki]/lata)jak dani wydawcy radzili sobie na poszczególnych rynkach (np. wykres liniowy dla konkretnego rynku) #za dużo wydawców
  #- (sprzedaż w regionach/lata)sprzedaż w danym regionie w stosunku do roku
  - (platformy/lata)okres życia platform na podstawie roku publikacji #31 platofrm
  - ??? (sprzedaż w regionach/sprzedaż)wykres kołowy! udziału w sprzedarzy poszczególnych rynków #chciałem zrobić z podziałem na lata zrobinym na interaktywnej osi
  - (gatunki/lata)jakie gatunki były popularne w danym okresie czasu #12 gatunków
  - (wydawcy/gatunki)z jakich gatunkow dani wydawcy sa najbardziej znani #tabelka
  - 1(wydawca / sprzedaż w regionach)zależność wydawcy ze sprzedarzą w danym regionie #ze względu na ilość wydawców zrobić "najlepsi wydawcy w danych regionach #tabelka #ancova
  - (gatunki/regiony)najlepsze gatunki w danym regionie #tabelka #mapka
  - (platformy/region)najlepsze platformy w danym regionie #tableka #mapka
  - !model prognozujacy sprzedarz na podstawie wydawcy, platformy i gatunku, roku - las losowy

zależność: chi^2 niezależności

model:
  drzewa decyzyjne:
  <https://www.statmethods.net/advstats/cart.html>

rok utworzenia zbioru 2020

```

```{r biblioteki, include=FALSE}
library(tidyverse) #ogólne
library(ggplot2) #wykresy
library(kableExtra) #tabelki
library(doParallel) #przyśpieszenie sprzętowe
registerDoParallel(cores = 8)
library(magick) #animowane wykresy
library(gganimate) #animowane wykresy
library(ggiraph) #interaktywne wykresy
library(ggthemes) #wykresy
library(highcharter) #interaktywne placki
#library(geomtextpath) #był potrzebny do cyklu zycia platform (nieinteraktywnego)
```

# Przedstawienie zbioru danych

### Źródło danych

Zbiór danych pochodzi ze stronny *Kaggle*:

<https://www.kaggle.com/datasets/arslanali4343/sales-of-video-games>.

### Zawartość zbioru

Zbiór danych jest zestawieniem wyników sprzedażowych gier video z lat 1980 - 2016 z uwzględnieniem platofrmy, na jaką zostały wydane, roku publikacji, gatunku i wydawcy. Zawarte zostały w nim tylko tytuły, które sprzedały się w liczbie większej niż 100 000 kopii. Zbiór uwzględnia wyniki sprzedażowe w Ameryce Północnej, Europie i Japonii.

<br/>

### Przedstawienie zmiennych

Zmienne zawarte w zbiorze:

-   `Rank` - Ranking ogólnej sprzedaży 

-   `Name` - Nazwa gry

-   `Platform` - Platforma wydania gry (np. PS3, SNES, PC etc.)

-   `Year` - Rok publikacji gry

-   `Genre` - Gatunek gry

-   `Publisher` - Wydawca gry

-   `NA_Sales` - Liczba sprzedanych kopii w Ameryce Północnej (w milionach)

-   `EU_Sales` - Liczba sprzedanych kopii w Europie (w milionach)

-   `JP_Sales` - Liczba sprzedanych kopii w Japonii (w milionach)

-   `Other_Sales` - Liczba sprzedanych kopii w pozostałych regionach (w milionach)

-   `Global_Sales` - Łączna liczba sprzedanych kopii na całym świecie  (w milionach)

<br/>

------------------------------------------------------------------------

# Cele badawcze

<details>

  <summary>Cele badawcze</summary>

Opis zbioru danych, przedstawienie korelacji między zawartymi w nim zmiennymi, budowa modelu predykcyjnego.

</details>

<br/>

___

# Przygotowanie zbioru

<details>

  <summary>Przygotowanie zbioru</summary>

<br/>

### Wczytanie danych

```{r wczytanie danych}
game_sales <- read.csv("C:/Users/Michc/Dropbox/Uczelnia/Semestr 5/Projekt z analizy danych/Projekt/dane/video_games.csv",na.strings = "N/A") 
game_sales <- game_sales %>%
  `rownames<-`(NULL)
```

<br/>

### Czyszczenie danych


#### Zmiana typu danych z *char* na *factor*

```{r czyszczenie danych}
game_sales$Name <- as.factor(game_sales$Name)
game_sales$Platform <- as.factor(game_sales$Platform)
game_sales$Genre <- as.factor(game_sales$Genre)
game_sales$Publisher <- as.factor(game_sales$Publisher)
```


#### Zamiana roku produkcji z *char* na *numeric*

```{r}
game_sales$Year <- as.numeric(game_sales$Year)
```


<br/>

### Obsługa braków danych


#### Zmiana *"unknown"* na *NA*

```{r}
game_sales[which(game_sales$Publisher=="Unknown"),6] <- NA

```


#### Lokalizowanie braków

<!-- <span style='font-size:20px'>Zestawienie braków danych z podziałem na zmienne</span> -->

```{r tabelka braków danych, eval=T, include=T, echo=F}
#zestawienie braków danych z podziałem na kolumny
kbl(tibble(Rank=sum(is.na(game_sales$Rank)),
       Name=sum(is.na(game_sales$Name)),
       Platform=sum(is.na(game_sales$Platform)),
       Year=sum(is.na(game_sales$Year)),
       Genre=sum(is.na(game_sales$Genre)),
       Publisher=sum(is.na(game_sales$Publisher)),
       NA_Sales=sum(is.na(game_sales$NA_Sales)),
       EU_Sales=sum(is.na(game_sales$EU_Sales)),
       JP_Sales=sum(is.na(game_sales$JP_Sales)),
       Other_sales=sum(is.na(game_sales$Other_Sales)),
       Global_Sales=sum(is.na(game_sales$Global_Sales)),
       'Year & Publisher'=count(game_sales[which(is.na(game_sales$Year) & is.na(game_sales$Publisher)),])), table.attr = "style = \"color: black;\""
       ,caption = "<span style='font-size:30px'>Zestawienie braków danych z podziałem na zmienne</span>"
    ) %>%
  kable_styling("basic", full_width = T,position = "float_left") %>%
  column_spec(c(4,6), color = "#FF3030") %>%
  column_spec(12, color = "orange") %>%
  column_spec(c(1:3,5,7:11), color = "#1E90FF")
```
<br/>

$407$ obserwacji z brakami danych jest niewielką liczbą w skali $16\,598$ $(\sim2.45\%)$. Usunięcie tych obserwacji nie wpłynie w znaczący sposób na wartość naukową zbioru.

```{r eval=T, include=T, echo=F}
missings <- game_sales[which(is.na(game_sales$Year) | is.na(game_sales$Publisher)),] %>%
  mutate(Rank = as.numeric(Rank))
#median(missings$Rank)
#mean(missings$Global_Sales)

#jakie statystyki mają wartości z brakami
tibble("Średnia z `Rank`"= mean(missings$Rank),"Mediana z `Global_Sales`"= median(missings$Global_Sales)) %>%
  kbl() %>%
  kable_styling()
```

```{r}
game_sales <- na.omit(game_sales)
```

```{r text sracapping, eval=FALSE, include=FALSE}
# pierwsze 12 tytułów alfabetycznie
head(levels(game_sales$Name), n = 12)

tidytext::unnest_tokens(data.frame(levels(game_sales$Name)))

count(tidytext::unnest_tokens(levels(game_sales$Name)))

levels(game_sales$Genre)
```

<br/>

### Obserwacje nietypowe

W zbiorze znalazły się obserwacje nietypowe

```{r eval=TRUE, include=TRUE, echo=FALSE}
data.frame(game_sales[which(game_sales$Year>2016),]) %>%
  `rownames<-`(NULL) %>%
  select(Rank,Name,Platform,Year,Genre,Publisher,Global_Sales) %>%
  kbl() %>%
  kable_styling()
```

<br/>

Są to $4$ obserwacje, których `rok wydania` jest późniejszy niż innych obserwacji ujętych w zbiorze, poza tym wykracza poza lata deklarowane w opisie zbioru na stronie źródłowej.

Ilość sprzedanych kopii wśród tych obserwacji jest niewielka, co potwierdza ich pozycja w rankingu, przez co zdecydowałem się na usunięcie tych obserwacji.

```{r}
game_sales <- game_sales[-which(game_sales$Year>2016),]
```

<br/>

W zbiorze znalazła się obserwacja, która w znacznym stopniu może zakłamywać statystki, a także utrudniać budowanie modeli predykcyjnych. Jest to obserwacja sklasyfikowana na pierwszej pozycji względem globalnej sprzedaży. 

```{r echo=FALSE}
head(game_sales,n=1) %>%
  kbl() %>%
  kable_styling()
```

Jej wynik globalnej sprzedaży przewyższa ponad dwukrotnie wynik tytułu znajdującego się na drugiej pozycji, a wynika on z faktu, że gra była dołączana za darmo do każdej zakupionej konsoli *Nintendo Wii*. 

Ze względu na znaczący wpływ na otrzymywane wyniki, jaki miała owa obserwacja postanowiłem prowadzić dalsze działania bez uwzględniania powyższej obserwacji.

```{r}
game_sales <- game_sales[-1,]
```

<br/>

Ponad to wśród danych znalazła się gra, której rok wydania jest dużo wcześniejszy od innych gier wydanych na tę platformę.

```{r echo=FALSE}
game_sales[which(game_sales$Platform=="DS"),] %>%
  ggplot(aes(x=Year))+
  geom_boxplot()+
  scale_x_continuous(breaks=seq(1980,2016,by=1))+
  labs(
    title="Gry wydane na Nintendo DS",
    x="Rok wydania"
  )+
  theme_classic(base_size = 10)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "black", size = 17, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,plot.caption = element_text(face = "italic")
    ,axis.text.y = element_blank()
    ,legend.position = "none"
    ,legend.background = element_rect(fill = "white")
    ,legend.title = element_blank()
  )

game_sales[which(game_sales$Platform=="DS"),] %>%
  arrange(Year) %>%
  select(Rank,Name,Platform,Year,Genre,Global_Sales) %>%
  head(1) %>%
  kbl() %>%
  kable_styling()
```
Platforma, na którą został wydany ów tytuł, miała premierę 21.11.2004, więc jest to niemożliwe, by jakakolwiek gra została na nią wydana przed 2004 rokiem. Udało mi się ustalić, że prawidłowa data premiery tego tytułu do 07.05.2010r. 

```{r}
game_sales[which(game_sales$Platform=="DS"&game_sales$Year==1985),"Year"] <- 2010
```

```{r eval=TRUE, include=TRUE, echo=FALSE}
rownames(game_sales) <- 1:nrow(game_sales)
game_sales <- game_sales %>%
  mutate(Rank = rownames(game_sales))
```


</details>

<br/>

___

# Opis zbioru

<details>

  <summary>Opis zbioru</summary>

<br/>

### Podstawowe statystki opisowe 

<!-- min, średnia, kwantyle (w tym mediana), max, sd -->

<br/>

```{r tabelka statystyk opisowych, eval=T, include=T, echo=F}
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
t <- data.frame(cbind(
  round(head(tibble(summary(game_sales$Year)),6),0),
  round(head(tibble(summary(game_sales$EU_Sales)),6),2),
  round(head(tibble(summary(game_sales$NA_Sales)),6),2),
  round(head(tibble(summary(game_sales$JP_Sales)),6),2),
  round(head(tibble(summary(game_sales$Other_Sales)),6),2),
  round(head(tibble(summary(game_sales$Global_Sales)),6),2)))

#t <- rbind(t,St.dev=apply(game_sales,2,sd))

colnames(t) <- c("Year","EU_Sales*","NA_Sales*","JP_Sales*","Other_Sales*","Global_Sales*")

row.names(t) <- c("Minimum","Q1","Mediana","Średnia","Q3","Maksimum")

kbl(t) %>%
  kable_styling(full_width = T) %>%
  add_footnote(label = "* liczba sztuk w milionach",notation = "none")

remove(t)
```


<br/>



<br/>

### Dane kategoryczne

Zbiór zawiera `r nlevels(game_sales$Name)` różnych tytułów gier, którym przyporządkowano `r nlevels(game_sales$Genre)` gatunków. Gry znadujące się w zbiorze zostały wydane przez `r nlevels(game_sales$Publisher)` wydawców, na `r nlevels(game_sales$Platform)` platform.



```{r include=FALSE}
# sunburstR::sunburst(data.frame("Wydawca"=game_sales$Publisher
#                                "Platforma"=game_sales$Platform, 
#                                "Gatunek"=game_sales$Genre), width="100%", height=400)
# 
# 
# game_sales %>%
#   mutate("Wydawca"=Publisher,
#          "Platforma"=Platform,
#          "Gatunek"=Genre) %>%
#   select(Wydawca,Platforma,Gatunek) %>%
#   d3r::d3_nest(value_cols = "Platforma") %>%
#   #group_by(Wydawca) %>%
#   sunburstR::sunburst(count=T,sumNodes = T)


```

```{r eval=FALSE, include=FALSE}
Global_Sales_Publisher <- data.frame(aggregate(game_sales$Global_Sales, by=list(Category=game_sales$Publisher), FUN = sum)) %>%
  `colnames<-`(c("Publisher","Global_Sales"))

# Global_Sales_Publisher %>%
#   d3r::d3_nest(value_cols = "Global_Sales") %>%
#   sunburstR::sunburst(width="100%", height=400)

game_sales %>%
filter(Name=="Test Drive Unlimited")
```


```{r include=FALSE, eval=FALSE}
head(Global_Sales_Publisher[order(Global_Sales_Publisher$Global_Sales, decreasing=T),],15)
```

</details>

<br/>

___

# Wizualizacja

<details>

  <summary>Wizualizacja</summary>
  
### Tytuły
  
```{r wykres publikacji, fig.width = 21, fig.height = 10, eval=T, include=T, echo=F}
game_sales %>%
ggplot(aes(Year))+
  geom_bar(na.rm=T,color="black",fill="#8800FF")+
  labs(title="Publikacje gier na przestrzeni lat",
       x="Rok publikacji",
       y="Liczba tytułów")+
#  scale_x_discrete()+
#  scale_x_discrete(breaks = 1980:2020)+
  scale_x_continuous(breaks=seq(1980,2016,by=2))+
  geom_hline(yintercept = c(500,1000), linetype = "dashed", color = "black", alpha = 0.8, linewidth=1.3)+
  theme_classic(base_size = 40)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "black", size = 48, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,plot.caption = element_text(face = "italic")
    #,plot.background = element_rect(fill = "#141414")
  )


#8800FF
```

```{r wykres sprzedazy, fig.width = 21, fig.height = 10, eval=T, include=T, echo=F,message=FALSE,warning=FALSE}
game_sales %>%
  mutate(Europa = EU_Sales,USA = NA_Sales,Japonia = JP_Sales,Other=Other_Sales) %>%
  select(Year,Europa,USA,Japonia,Other) %>%
  aggregate(.~Year, sum) %>%
  pivot_longer(-Year) %>%
  ggplot()+
    geom_smooth(aes(Year,value*100000,colour=name),se=F)+
    # geom_smooth(aes(y=EU_Sales*1000000),se=F,color="darkgreen") +
    # geom_smooth(aes(y=NA_Sales*1000000),se=F,color="darkblue") +
    # geom_smooth(aes(y=JP_Sales*1000000),se=F,color="darkred") +
    # geom_smooth(aes(y=Other_Sales*1000000),se=F,color="black") +
    labs(title="Łączna sprzedaż gier wydawanych w poszczególnych latach z podziałem na regiony",
         x="Rok wydania",
         y="Liczba sprzedanych kopii")+
    scale_x_continuous(breaks=seq(1980,2016,by=2))+
    scale_y_continuous(labels = scales::label_number(big.mark = " ", decimal.mark = ",", scale = 1/1000000, suffix = " mln"), position = "right")+
    scale_color_manual(values = c("green","red","blue","black"))+
    theme_classic(base_size = 40)+
    theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
      ,axis.text.y = element_text(angle = -30, vjust=0)
      ,plot.title = element_text(color = "black", size = 32, face = "bold")
      ,plot.subtitle = element_text(size = 25, face = "bold")
      ,plot.caption = element_text(face = "italic")
      ,legend.position = c(0.2, 0.75)
      ,legend.background = element_rect(fill = "white")
      ,legend.title = element_blank()
    )
```

<br/>

### Platformy 

```{r echo=FALSE,eval=TRUE,include=TRUE,message=FALSE,warning=FALSE, fig.width = 21, fig.height = 15}
# t1 <- game_sales %>%
#   select(Year,Platform) %>%
#   aggregate(.~Platform, FUN = min) %>%
#   pivot_longer(-Platform) %>%
#   mutate(min = value) %>%
#   select(Platform, min)
# 
# 
# t2 <- game_sales %>%
#   select(Year,Platform) %>%
#   aggregate(.~Platform, FUN = max) %>%
#   pivot_longer(-Platform) %>%
#   mutate(max = value) %>%
#   select(Platform, max)
# 
# t <- merge(t1,t2, by="Platform", sort=T)
# 
# t[order(t$min),] %>%
#   `row.names<-`(NULL) %>%
#   `colnames<-`(c("Platforma","Rok startu","Rok końca")) %>%
#   kbl() %>%
#   kable_styling()%>%
#   scroll_box(width = "100%", height = "200px")
#
# #niepotrzebne po wykonaniu interaktywnego

t3 <- game_sales %>%
  select(Year,Platform,Name) %>%
  aggregate(.~Platform+Year, FUN = sum) 

t3 <- t3[order(t3$Platform),] %>%
  group_by(Platform)%>%
  mutate(texto = paste0(Platform, "\n",
                        min(Year), "-",max(Year)
                        ))

# #nieinteraktywny
# t3 %>%
#   ggplot(aes(x=Platform,y=Year))+
#   geom_textline(aes(label=Platform),size=4.3)+
#   scale_y_continuous(breaks=seq(1980,2016,by=2))+
#   geom_hline(yintercept = seq(1980,2016,by=2), linetype = "dashed", color = "black", alpha = 0.5, size=0.1)+
#   coord_flip()+
#   theme_classic(base_size = 20)+
#   theme(
#     axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
#     ,plot.title = element_text(color = "black", size = 32, face = "bold")
#     ,plot.subtitle = element_text(size = 25, face = "bold")
#   )

# interaktywny
gg <- t3 %>%
  ggplot(aes(y=Platform,x=Year))+
  scale_x_continuous(breaks=seq(1980,2016,by=1))+
  # geom_hline(xintercept = seq(1980,2016,by=1), linetype = "dashed", color = "black", alpha = 0.5, size=0.1)+
  geom_line_interactive(size = 1.2,
                        alpha = 0.4,
                        aes(tooltip = texto)) +
  geom_point_interactive(data = t3 %>%
                          group_by(Platform) %>%
                          filter(Year == max(Year) | Year == min(Year)),
                        aes(tooltip = texto), #specifies tooltip for ggiraph
                          fill = "white",
                          size = 2.5,
                          stroke = 1.5,
                          shape = 21) +
  geom_text_interactive(data = t3 %>%
                          group_by(Platform) %>%
                          filter(Year == max(Year)),
                        aes(x = Year + 0.7, y = Platform,
                            color = Platform,
                            label = Platform),
                        check_overlap = T)+
  theme_classic(base_size = 20)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "black", size = 32, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,legend.position = "none"
  )

girafe(ggobj = gg,
       width_svg = 21, height_svg = 10, #sizes the output plot
       options = list(
          opts_tooltip(
            opacity = 0.8, #opacity of the background box
            css = "background-color:#4c6061; color:white; padding:10px; border-radius:5px;"),
       opts_hover_inv(css = "stroke-width: 1;opacity:0.6;"),
       opts_hover(css = "stroke-width: 4; opacity: 1;")
       )
)



rm(list = c('t','t1','t2'))
```

```{r eval=TRUE, echo=FALSE}
game_sales %>%
  mutate(Sales=Global_Sales*10000000) %>%
  select(Platform,Sales) %>%
  aggregate(.~Platform, FUN = sum, drop = FALSE) %>%
  group_by(Platform) %>%
  arrange(desc(Sales),Platform) %>%
  ungroup() %>%
  mutate(texto = paste0(Platform," ", 
                        round(Sales/sum(Sales)*100,2),"%")) %>%
    hchart("pie", 
           hcaes(x = texto, y = Sales),
           name = "Sprzedanych kopii gier"
    ) %>%
    hc_title(
      text = "Udział platform w rynku growym w latach 1980-2016",
      margin = 20,
      align = "left",
      style = list(color = "black", useHTML = TRUE)
    )

```

### Gatunki

```{r echo=F, eval=FALSE, fig.width = 21, fig.height = 10}
game_sales %>%
  select(Year,Genre,Global_Sales) %>%
  aggregate(.~Genre+Year, FUN = sum) %>%
  group_by(Year) %>%
  arrange(Year,desc(Global_Sales)) %>%
  mutate(Rank=row_number(Year)) %>% #nie podobało mi się użycie rank, bo zwracała wyniki z rangami ogólnymi i z 0.5
  ungroup() %>%
  mutate(texto = paste0(Genre, "\n",
                        Year, ": ",
                        format(round(Global_Sales*1000000, 0),
                               big.mark = ","))) %>%
  ggplot(aes(x=Year,y=Rank,color=Genre))+
  geom_line()+
  geom_point()+
  labs(title="Popularność gatunków gier na przestrzeni lat",
       x="Rok publikacji",
       y="",
       color="Gatunki")+
  scale_x_continuous(breaks=seq(1980,2016,by=1))+
  scale_y_reverse(breaks=seq(1,12,by=1))+
  geom_hline(yintercept = seq(1,12,by=1), linetype = "dashed", color = "black", alpha = 0.4, size=0.7)+
  theme_classic(base_size = 20)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "black", size = 22, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,plot.caption = element_text(face = "italic")
    ,legend.position = "none"
  )







```

```{r echo=F, fig.width = 21, fig.height = 10}
#interaktywny
 

ggdane <- game_sales %>%
  select(Year,Genre,Global_Sales) %>%
  aggregate(.~Genre+Year, FUN = sum, drop = FALSE) %>%
  group_by(Year) %>%
  arrange(Year,desc(Global_Sales)) %>%
  # complete(Genre, fill=list(Global_Sales = 0)) %>%
  # mutate(Rank=round(13-rank(Global_Sales,na.last = TRUE,ties.method="last"))) %>%
  mutate(Rank=row_number(Year)) %>%
  ungroup() %>%
  mutate(texto = paste0(Genre, "\n",
                        Year, ": ",
                        format(round(Global_Sales*1000000, 0),
                               big.mark = ","), "\n", 
                        "Pozycja: ", Rank))


gg <- ggdane %>%
  ggplot(aes(x=Year,y=Rank,color=Genre,data_id=Genre,group=Genre,label=Genre))+
  scale_x_continuous(breaks=seq(1980,2016,by=1))+
  scale_y_reverse(breaks=seq(12,1,by=-1))+
  #geom_hline(yintercept = seq(1,12,by=1), linetype = "dashed", color = "black", alpha = 0.4, size=0.7)+
  geom_line_interactive(size = 1.2,
                        alpha = 0.4) +
  geom_point_interactive(
                aes(tooltip = texto), #specifies tooltip for ggiraph
                         fill = "white",
                         size = 2.5,
                         stroke = 1.5,
                         shape = 21) +
  geom_text_interactive(data = ggdane %>% 
                          group_by(Genre) %>%
                          filter(Year == max(Year)),
                        aes(x = Year + 1.1, y = Rank,
                            color = Genre, 
                            label = Genre),
                        check_overlap = T)+
  labs(y = NULL, x = "Rok publikacji") +
  theme_classic(base_size = 20)+
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    ,plot.title = element_text(color = "black", size = 22, face = "bold")
    ,plot.subtitle = element_text(size = 25, face = "bold")
    ,plot.caption = element_text(face = "italic")
    ,legend.position = "none"
  )

girafe(ggobj = gg, 
       width_svg = 21, height_svg = 10, #sizes the output plot
       options = list(
          opts_tooltip(
            opacity = 0.8, #opacity of the background box 
            css = "background-color:#4c6061; color:white; padding:10px; border-radius:5px;"),
       opts_hover_inv(css = "stroke-width: 1;opacity:0.6;"),
       opts_hover(css = "stroke-width: 4; opacity: 1;")
       )
)

# game_sales[which(game_sales$Genre=="Puzzle"&game_sales$Year==1982),]
# game_sales[which(game_sales$Genre=="Shooter"&game_sales$Year==1984),]
# game_sales[which(game_sales$Genre=="Platform"&game_sales$Year==1985),]
# game_sales[which(game_sales$Genre=="Action"&game_sales$Year==1986),]
# game_sales[which(game_sales$Genre=="Platform"&game_sales$Year==1988),]
```




<br/>

</details>

<br/>

___

# Modele predykcyjne

<details>

  <summary>Modele predykcyjne</summary>

## Model predykcyjny - `TidyModels`

<details>

  <summary>Model predykcyjny 1</summary>

<br/>

```{r message=FALSE, warning=FALSE}
library(tidymodels)
set.seed(1410)
sales_split <- initial_split(game_sales, strata = Global_Sales)
sales_train <- training(sales_split)
sales_test <- testing(sales_split)

sales_folds <- vfold_cv(sales_train, strata = Global_Sales)
sales_folds
```

```{r eval=TRUE,include=FALSE,echo=FALSE}
library(usemodels)

use_ranger(Global_Sales ~ Platform+Genre+Publisher, data = sales_train)

library(textrecipes)
```

```{r}
ranger_recipe <- 
  recipe(formula = Global_Sales ~ Platform + Genre + Publisher, data = sales_train) 

ranger_spec <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_mode("regression") %>% 
  set_engine("ranger") 

ranger_workflow <- 
  workflow() %>% 
  add_recipe(ranger_recipe) %>% 
  add_model(ranger_spec) 

set.seed(6164)
#save(ranger_tune,file = "dane/ranger_tune.rda")
load("dane/ranger_tune.rda")
# ranger_tune <-
#   tune_grid(ranger_workflow,
#             resamples = sales_folds,
#             grid = 11)
```

```{r}
show_best(ranger_tune, metric = "rmse")
show_best(ranger_tune, metric = "rsq")

autoplot(ranger_tune)

final_rf <- ranger_workflow %>%
  finalize_workflow(select_best(ranger_tune))

final_rf

sales_fit <- last_fit(final_rf,sales_split)
sales_fit

collect_metrics(sales_fit)
```

```{r}
collect_predictions(sales_fit) %>%
  ggplot(aes(Global_Sales, .pred)) +
  geom_abline(lty = 2, color = "gray50") +
  geom_point(alpha = 0.5, color = "midnightblue") +
  coord_fixed()



```

</details>

<br/>

## M-method random forest model

<details>

  <summary>Model predykcyjny 2</summary>

<br/>

```{r}
rec <- recipe(Global_Sales ~ Platform + Genre + Publisher + Year,
              data = sales_train) %>%
  step_normalize(all_numeric_predictors())

rf <- rand_forest(
  mtry = tune(),
  trees = tune(),
  min_n = tune()
) %>%
  set_mode("regression") %>%
  set_engine("ranger", importance = "impurity")

params <- extract_parameter_set_dials(rf)
params <- finalize(params, sales_train)

rs <- vfold_cv(sales_train, v = 5)

meas <- metric_set(rsq, rmse, mae)

grid <- grid_latin_hypercube(params, size = 10)
grid %>%
  flextable::flextable()

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf)

#save(rf_res,file="dane/rf_res.rda")
load("dane/rf_res.rda")
# rf_res <-
#   rf_wf %>%
#   tune_grid(
#     resamples = rs,
#     grid = grid,
#     metrics = meas
# )

rf_res %>%
  collect_metrics() %>%
  flextable::flextable()

rf_res %>%
  show_best(metric = "rsq")

rf_res %>%
  show_best(metric = "rmse")

rf_res %>% 
  show_best(metric = "mae")

autoplot(rf_res)

rf_best_param <- select_best(rf_res, metric = "rmse")

rf_final <- 
  rf_wf %>%
  finalize_workflow(rf_best_param)

rf_fit <- rf_final %>%
  last_fit(sales_split, metrics = meas)

rf_fit %>%
  collect_metrics()

rf_fit %>%
  collect_predictions() %>%
  select(.pred, Global_Sales) %>%
  head(n = 20) %>%
  flextable::flextable()

rf_fit %>%
  collect_predictions() %>%
  select(.pred, Global_Sales) %>%
  ggplot(aes(.pred, Global_Sales)) +
  geom_jitter(width = 0, alpha = 0.05) +
  geom_smooth(method = lm, 
              se = F)
  #tune::coord_obs_pred()

result <- rf_fit %>%
  collect_predictions() %>%
  select(.pred, Global_Sales)
```

</details>

</details>


